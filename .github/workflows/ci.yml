name: CI/CD

on:
  push:
    branches: ['**']
    tags: ['v*.*.*']
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-test-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=long

      # Build through test stage and cache
      - name: Build through test stage
        uses: docker/build-push-action@v5
        with:
          context: .
          target: test
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          outputs: type=docker,dest=/tmp/test-image.tar
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      # Load the test image for artifact extraction
      - name: Load test image
        run: |
          docker load < /tmp/test-image.tar
          echo "Loaded images:"
          docker images

      # Extract all artifacts from test stage
      - name: Extract artifacts
        if: always()
        run: |
          # Get the image ID of our test stage
          IMAGE_ID=$(docker images --format "{{.ID}}" | head -n 1)

          # Create temporary container from test stage
          CONTAINER_ID=$(docker create $IMAGE_ID)

          # Create artifacts directory
          mkdir -p artifacts

          # Copy all artifacts from container
          docker cp $CONTAINER_ID:/app/artifacts/. ./artifacts/

          # Cleanup container
          docker rm $CONTAINER_ID

          # List extracted artifacts
          echo "Extracted artifacts:"
          ls -R ./artifacts

      # Upload all artifacts
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            artifacts/**/*
          retention-days: 30

      # Process code coverage
      - name: Process code coverage
        if: success()
        uses: codecov/codecov-action@v4
        with:
          directory: ./artifacts/coverage
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      # Build final production image using cached layers
      - name: Build and push production image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: runner
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
            type=local,src=/tmp/test-image.tar
          cache-to: |
            type=gha,mode=max
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        if: github.event_name != 'pull_request'
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: github.event_name != 'pull_request'
        with:
          sarif_file: 'trivy-results.sarif'
